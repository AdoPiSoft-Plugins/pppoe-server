"use strict";var promiseSeries=require("promise.series"),core=require("plugin-core"),config=require("../config.js"),clients=require("../clients.js"),clients_manager=require("../services/clients-manager.js"),subscriptions=require("../services/subscriptions.js"),{bills_manager}=core,{dbi}=core;exports.checkPaymentStatus=async s=>{if(!s.auto_bill||!s.expiration_date||!s.expiration_date)return s;let due_date=new Date(s.expiration_date);var ref_number=[s.id,due_date.getTime()].join("");return s.ref_number=ref_number,s.is_paid=await bills_manager.isPaid(ref_number),s.bill_url=await bills_manager.billUrl(ref_number),s},exports.clients=async(req,res,next)=>{try{let list=await clients.listAll();await promiseSeries(list.map(c=>async()=>{await exports.checkPaymentStatus(c)})),res.json(list||[])}catch(e){next(e)}},exports.settings=async(req,res,next)=>{try{var cfg=await config.read();await config.startServer(),res.json(cfg)}catch(e){next(e)}},exports.updateSettings=async(req,res,next)=>{try{var prev_cfg=await config.read(),params=req.body;await config.save(params),prev_cfg.interface!=params.interface&&await config.restartServer(),res.json({})}catch(e){next(e)}},exports.createClient=async(req,res,next)=>{try{var client=req.body;await clients.createClient(client),res.json(client)}catch(e){next(e)}},exports.updateClient=async(req,res,next)=>{try{var{id}=req.params,client=req.body;if(await clients.updateClient(id,client),"connected"==client.status)try{await clients_manager.connect({ip:client.ip_address,iface:client.iface})}catch(e){}res.json(client)}catch(e){next(e)}},exports.updateBill=async(req,res,next)=>{try{var{id}=req.params;let client=await dbi.models.PppoeAccount.findByPk(id);await subscriptions.generateBill(client.get({plain:!0})),res.json({success:!0})}catch(e){next(e)}},exports.deleteClient=async(req,res,next)=>{try{var{id}=req.params,client=await dbi.models.PppoeAccount.findByPk(id);try{await clients_manager.disconnect({ip:client.ip_address,iface:client.iface,is_expired:!0})}catch(e){}await clients.deleteClient(id),res.json({})}catch(e){next(e)}},exports.onConnected=async(req,res,next)=>{try{var{ip,iface}=req.query||{};await clients_manager.connect({ip:ip,iface:iface}),res.json({})}catch(e){next(e)}},exports.onDisconnected=async(req,res,next)=>{try{var{ip,iface}=req.query||{};await clients_manager.disconnect({ip:ip,iface:iface}),res.json({})}catch(e){next(e)}};