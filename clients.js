"use strict";var start_ip,end_ip,util=require("util"),fs=require("fs"),read_file=util.promisify(fs.readFile),write_text=util.promisify(fs.writeFile),writeFile=write_text,{dbi,machine_id}=require("plugin-core"),{Sequelize}=dbi,chap_secrets=process.env.CHAP_PATH||"/etc/ppp/chap-secrets",ip_address_pool=process.env.IPADDRESS_POOL||"/etc/ppp/ipaddress_pool",IP=require("ip6addr");async function startIP(){if(start_ip)return start_ip;var txt=await read_file(ip_address_pool,"utf8").catch(e=>"")||"";return start_ip=(txt.match(/^(\d+.\d+.\d+.\d+)-/)||[])[1]}async function endIP(){if(end_ip)return end_ip;var regx=(await read_file(ip_address_pool,"utf8").catch(e=>"")||"").match(/^(\d+.\d+.\d+.\d+)-(\d+)/)||[];return end_ip=regx[1].replace(/\d+$/,regx[2]),start_ip}exports.listAll=async()=>{return await dbi.models.PppoeAccount.scope(["default_scope"]).findAll({raw:!0})||[]},exports.updateChapSecrets=async()=>{var clients=await exports.listAll(),txt="";clients.forEach(c=>{let exp_date=c.expiration_date?new Date(c.expiration_date):null;(exp_date instanceof Date&&exp_date.getTime()>(new Date).getTime()||!c.expire_minutes&&!c.expiration_date)&&(txt+=`${c.username}	*	${c.password}	${c.ip_address}\n`)}),await writeFile(chap_secrets,txt).catch(console.log)},exports.isValidPhone=phone=>!!phone&&(11===phone.length||"09"===phone.substr(0,2)||!isNaN(phone)),exports.createClient=async cfg=>{if(!cfg.username||!cfg.password)throw new Error("Username and password are required fields");if(cfg.auto_bill&&!exports.isValidPhone(cfg.billing_phone_number))throw new Error("Phone number is invalid!");if(cfg.auto_bill&&!(0<cfg.billing_due_date))throw new Error("Bill due date is invalid");if(cfg.auto_bill&&!(0<cfg.billing_date))throw new Error("Billing date is invalid");var clients=await exports.listAll()||[];if(await dbi.models.PppoeAccount.scope(["default_scope"]).findOne({where:{username:cfg.username}}))throw new Error("Username already exists");for(var exp_date,i=0,_ip_=await startIP();!cfg.ip_address&&i<=9999;){if(!(0<=clients.findIndex(c=>c.ip_address===_ip_)||_ip_===await endIP())){cfg.ip_address=_ip_;break}_ip_=IP.parse(_ip_).offset(1).toString(),i++}return cfg.auto_bill&&((exp_date=new Date).setDate(cfg.billing_due_date),exp_date<=new Date&&exp_date.setMonth(exp_date.getMonth()+1),cfg.expiration_date=exp_date,cfg.expire_minutes=0),await dbi.models.PppoeAccount.scope(["default_scope"]).create({...cfg,machine_id:machine_id}),await exports.updateChapSecrets(),exports.listAll()},exports.updateClient=async(id,cfg)=>{if(!cfg.username||!cfg.password)throw new Error("Username and password are required fields");if(cfg.auto_bill&&!exports.isValidPhone(cfg.billing_phone_number))throw new Error("Phone number is invalid!");if(cfg.auto_bill&&!(0<cfg.billing_due_date))throw new Error("Bill due date is invalid");if(cfg.auto_bill&&!(0<cfg.billing_date))throw new Error("Billing date is invalid");var{Op:exp_date}=Sequelize;if(await dbi.models.PppoeAccount.scope(["default_scope"]).findOne({where:{username:cfg.username,id:{[exp_date.not]:id}}}))throw new Error("Username already exists");return cfg.auto_bill&&!cfg.expiration_date&&(exp_date=cfg.expiration_date?new Date(cfg.expiration_date):new Date,(exp_date=isNaN(exp_date.getTime())?new Date:exp_date).setDate(cfg.billing_due_date),exp_date<=new Date&&exp_date.setMonth(exp_date.getMonth()+1),cfg.expiration_date=exp_date,cfg.expire_minutes=0),await dbi.models.PppoeAccount.update(cfg,{where:{id:id}}),await exports.updateChapSecrets(),exports.listAll()},exports.deleteClient=async id=>(await dbi.models.PppoeAccount.scope(["default_scope"]).destroy({where:{id:id}}),await exports.updateChapSecrets(),exports.listAll());